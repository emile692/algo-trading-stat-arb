# ============================================================
# experiments/aggregate_portfolio.py
# ============================================================
"""
Agr√©gation et analyse du portefeuille final Stat-Arb
-----------------------------------------------------
1Ô∏è‚É£ Charge le portefeuille final (Static, WF ou Mixte)
2Ô∏è‚É£ R√©cup√®re les √©quit√©s individuelles pond√©r√©es
3Ô∏è‚É£ Construit et sauvegarde l‚Äô√©quit√© totale du portefeuille
4Ô∏è‚É£ Calcule les m√©triques de performance (Sharpe, PnL, etc.)
5Ô∏è‚É£ Affiche la courbe de NAV cumul√©e
"""

import argparse
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from pathlib import Path
import yaml
from utils.time_scaling import get_bars_per_year


# ============================================================
# ‚öôÔ∏è CONFIGURATION UTILITAIRE
# ============================================================

def load_params(config_path: str = "config/params.yaml") -> dict:
    """Charge le fichier YAML de configuration."""
    with open(config_path, "r") as f:
        return yaml.safe_load(f)


def get_equity_dirs(mode: str) -> list[Path]:
    """Retourne la liste des dossiers d‚Äô√©quit√©s √† utiliser selon le mode."""
    if mode.lower() == "mixte":
        return [Path("results/equities/static"), Path("results/equities/wf")]
    return [Path(f"results/equities/{mode.lower()}")]


def load_final_portfolio(mode: str) -> pd.DataFrame:
    """Charge le CSV du portefeuille final selon le mode."""
    path = Path(f"results/final_portfolio_{mode}.csv")
    if not path.exists():
        raise FileNotFoundError(f"‚ùå Fichier introuvable : {path}")
    print(f"üìà Chargement du portefeuille final : {path}")
    return pd.read_csv(path)


def load_and_weight_equities(final_df: pd.DataFrame, equity_dirs: list[Path],
                             initial_capital: float) -> list[pd.Series]:
    """Charge les √©quit√©s des paires, les pond√®re et retourne une liste de s√©ries."""
    equities = []

    for _, row in final_df.iterrows():
        pair = row["Pair"]
        weight = row["weight"]

        found_path = None
        for directory in equity_dirs:
            candidate = directory / f"{pair}.csv"
            if candidate.exists():
                found_path = candidate
                break

        if not found_path:
            print(f"‚ö†Ô∏è √âquity manquante : {pair}")
            continue

        eq = pd.read_csv(found_path, index_col=0)
        eq.index = pd.to_datetime(eq.index)

        # On prend la premi√®re colonne num√©rique trouv√©e
        num_cols = eq.select_dtypes(include=["float", "int"]).columns
        if len(num_cols) == 0:
            print(f"‚ö†Ô∏è Aucune colonne num√©rique trouv√©e pour {pair}")
            continue

        equity_col = num_cols[0]
        # baseline par paire pour avoir un PnL en ‚Ç¨ (base 0)
        eq_euros = (eq[equity_col] - eq[equity_col].iloc[0]) * weight
        equities.append(eq_euros)

    if not equities:
        raise ValueError("‚ùå Aucune √©quity trouv√©e. V√©rifie les CSV dans results/equities/...")

    return equities


def compute_performance(portfolio_eq: pd.Series, bars_per_year: int,
                        initial_capital: float) -> dict:
    """Calcule les m√©triques de performance du portefeuille."""

    # plus de coupe ni re-baseline : portfolio_eq est d√©j√† un PnL cumul√© pond√©r√©
    nav = initial_capital + portfolio_eq

    pnl_diff = portfolio_eq.diff().replace([np.inf, -np.inf], np.nan).dropna()
    returns = pnl_diff / initial_capital

    sharpe = float("nan")
    if not returns.empty and returns.std() != 0:
        sharpe = returns.mean() / returns.std() * np.sqrt(bars_per_year)

    final_value = nav.iloc[-1]
    gain_euros = final_value - initial_capital
    gain_pct = (final_value / initial_capital - 1) * 100

    return {
        "sharpe": sharpe,
        "final_value": final_value,
        "gain_euros": gain_euros,
        "gain_pct": gain_pct,
        "nav": nav,
    }


def plot_nav(nav: pd.Series, mode: str, initial_capital: float):
    """Affiche la courbe de valeur cumul√©e du portefeuille."""
    plt.figure(figsize=(10, 5))
    nav.plot(title=f"Portefeuille {mode} ‚Äî Valeur cumul√©e (base {initial_capital:,.0f} ‚Ç¨)", lw=2)
    plt.ylabel("Valeur (‚Ç¨)")
    plt.grid(True)
    plt.tight_layout()
    plt.show()


# ============================================================
# üöÄ MAIN
# ============================================================

def main():
    parser = argparse.ArgumentParser(description="Agr√©gation du portefeuille final Stat-Arb.")
    parser.add_argument("--mode", choices=["Static", "WF", "Mixte"], default="Static",
                        help="Mode du portefeuille : Static, WF ou Mixte (d√©faut: Static)")
    parser.add_argument("--capital", type=float, default=10_000,
                        help="Capital initial simul√© (d√©faut: 10 000 ‚Ç¨)")
    args = parser.parse_args()

    # --- Param√®tres globaux ---
    params = load_params("config/params.yaml")
    freq = params.get("freq", "1H")
    bars_per_year = get_bars_per_year(freq)

    mode = args.mode
    initial_capital = args.capital

    # --- Chargement du portefeuille ---
    final_df = load_final_portfolio(mode)
    equity_dirs = get_equity_dirs(mode)
    equities = load_and_weight_equities(final_df, equity_dirs, initial_capital)

    # --- Agr√©gation ---
    portfolio_eq = sum(equities)
    portfolio_eq.name = "Portfolio"

    output_path = Path(f"results/portfolio_equity_{mode.lower()}.csv")
    output_path.parent.mkdir(parents=True, exist_ok=True)
    portfolio_eq.to_csv(output_path)
    print(f"üíæ Sauvegard√© ‚Üí {output_path}")

    # --- Calculs de performance ---
    stats = compute_performance(portfolio_eq, bars_per_year, initial_capital)
    print(f"\nüèÅ Sharpe global ({mode}) : {stats['sharpe']:.2f}")
    print(f"üí∞ Valeur finale : {stats['final_value']:,.2f} ‚Ç¨")
    print(f"üìà Gain total : {stats['gain_euros']:,.2f} ‚Ç¨ ({stats['gain_pct']:.2f}%)")

    # --- Visualisation ---
    plot_nav(stats["nav"], mode, initial_capital)


# ============================================================
# ENTRY POINT
# ============================================================
if __name__ == "__main__":
    main()
